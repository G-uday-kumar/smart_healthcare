// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Summarizes a patient's symptoms over a given time period.
 *
 * - summarizeSymptoms - A function that handles the summarization of patient symptoms.
 * - SummarizeSymptomsInput - The input type for the summarizeSymptoms function.
 * - SummarizeSymptomsOutput - The return type for the summarizeSymptoms function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const SummarizeSymptomsInputSchema = z.object({
  patientId: z.string().describe('The ID of the patient.'),
  startDate: z.string().describe('The start date for the summary period (YYYY-MM-DD).'),
  endDate: z.string().describe('The end date for the summary period (YYYY-MM-DD).'),
  symptomLogs: z.array(z.object({
    date: z.string(),
    symptoms: z.array(z.string()),
    medication: z.array(z.string()),
    vitals: z.record(z.string(), z.string())
  })).describe('The symptom logs for the patient within the specified date range')
});
export type SummarizeSymptomsInput = z.infer<typeof SummarizeSymptomsInputSchema>;

const SummarizeSymptomsOutputSchema = z.object({
  summary: z.string().describe('A summary of the patient\'s symptoms over the specified time period.'),
});
export type SummarizeSymptomsOutput = z.infer<typeof SummarizeSymptomsOutputSchema>;

export async function summarizeSymptoms(input: SummarizeSymptomsInput): Promise<SummarizeSymptomsOutput> {
  return summarizeSymptomsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'summarizeSymptomsPrompt',
  input: {
    schema: z.object({
      patientId: z.string().describe('The ID of the patient.'),
      startDate: z.string().describe('The start date for the summary period.'),
      endDate: z.string().describe('The end date for the summary period.'),
      symptomLogs: z.array(z.object({
        date: z.string(),
        symptoms: z.array(z.string()),
        medication: z.array(z.string()),
        vitals: z.record(z.string(), z.string())
      })).describe('The symptom logs for the patient within the specified date range')
    }),
  },
  output: {
    schema: z.object({
      summary: z.string().describe('A summary of the patient\'s symptoms over the specified time period.'),
    }),
  },
  prompt: `You are a doctor summarizing a patient's symptoms over a period of time.

  Patient ID: {{{patientId}}}
  Start Date: {{{startDate}}}
  End Date: {{{endDate}}}

  Here are the patient's symptom logs:
  {{#each symptomLogs}}
  Date: {{{date}}}
  Symptoms: {{#each symptoms}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  Medication: {{#each medication}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  Vitals: {{#each (lookup this 'vitals')}}{{{@key}}}: {{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
  {{/each}}

  Please provide a concise summary of the patient's symptoms, medication, and vitals during this period.
  Focus on any trends or significant changes in their condition.
  `,
});

const summarizeSymptomsFlow = ai.defineFlow<
  typeof SummarizeSymptomsInputSchema,
  typeof SummarizeSymptomsOutputSchema
>({
  name: 'summarizeSymptomsFlow',
  inputSchema: SummarizeSymptomsInputSchema,
  outputSchema: SummarizeSymptomsOutputSchema,
}, async input => {
  const {output} = await prompt(input);
  return output!;
});
